name: Rollback to particular version - Manual Trigger

on:
  workflow_dispatch:  # Manual trigger for rollback
    inputs:
      target_commit:
        description: 'Stable Version Image Id'
        required: true
env:
  AWS_REGION: ap-southeast-2 #MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: 123456789XXXXXXXX.dkr.ecr.ap-southeast-2.amazonaws.com/testapp           # set this to your Amazon ECR repository name
  ECS_SERVICE: testapi-java-service #MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: testapi-java-dev                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./testapi-java-dev-td.json     #MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                                # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: testapi-java     #MY_CONTAINER_NAME           # set this to the name of the container in the
                                                # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  rollback:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release - ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ env.AWS_REGION }}

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ github.event.inputs.target_commit }}
    #     environment-variables: |
    #       ENVIRONMENT=${{ env.ENVIRONMENT }}
    #       HOST=${{ vars.HOST }} 
    #       PORT=${{ vars.PORT }} 
    #       ELASTIC_URL=${{ vars.ELASTIC_URL }}
    #       ELASTIC_KEY=${{ secrets.ELASTIC_KEY }} 
    #       IMAGE=${{ github.event.inputs.target_commit }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   id: ecs-deploy
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true

    # - name: Check if deployment was successful
    #   id: check-deployment
    #   run: |
    #       CURRENT_TASK_DEF_ARN=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query services[0].deployments[0].taskDefinition | jq -r ".")
    #       NEW_TASK_DEF_ARN=${{ steps.ecs-deploy.outputs.task-definition-arn }}
    #       REVISION=${GITHUB_SHA::8}
    #       echo "Current task arn: $CURRENT_TASK_DEF_ARN"
    #       echo "New task arn: $NEW_TASK_DEF_ARN"
    #       echo "Latest revision: $REVISION"
    #       if [ "$CURRENT_TASK_DEF_ARN" != "$NEW_TASK_DEF_ARN" ]; then
    #         echo "Deployment failed with latest code revision."
    #         exit 1
    #       else
    #         echo "Deployment successfull."
    #       fi

    # - name: Reset to specific commit
    #   run: |
    #     git reset ${{ github.event.inputs.target_commit }} --hard
    #     # Replace 'target_commit' with the commit hash you want to rollback to

    # - name: Push changes
    #   run: |
    #     git push --force origin main  # Replace 'main' with your branch
    #     # Warning: Use --force with caution, as it rewrites history